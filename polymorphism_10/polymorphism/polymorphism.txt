Consider the following polymorphism example. We have to create a program where the simulation of movements of several
types of animals for a biological study. Classes Fish,Frog and Bird represent the types of animals under consideration.
Each class extends the superclass Animal which contains a method "move" and maintains the animal's current x-y
coordinates. Each subclass implements method move. Our program maintains an animal array containing references to objects
of the various Animal subclasses. TO simulate the animal's movements, the program sends the same message to each object every
second - namely, move. Each specific type of Animal responds to a move message in its own way - a Fish swims 3 feet, a
Frog jumps 5 feet and a Bird flies 10 feet. Each object modifies its x-y coordinates accordingly. Relying on each object
to know how to do the right thing in response to the same method call is key to the concept of polymorphism.
Poly means "many" and morphism means "forms". The same message sent to a variety of objects has many forms of results -
hence the term polymorphism.

With polymorphism, we can design and implement systems that are easily extensible - new classes can be added with little or
no modification to the general portions of the program, as long as the new classes are part of the inheritance
hierarchy that the program processes generically. The only parts of a program that must be altered are those that require
direct knowledge of the new classes that we add to the hierarchy. For example, if we add the Tortoise class to the
project by extending class Animal, we need to write only the Tortoise class and the part of the simulation that instantiates
a Tortoise object. The portion of the simulation that tell each Animal to move generically can remain the same.

